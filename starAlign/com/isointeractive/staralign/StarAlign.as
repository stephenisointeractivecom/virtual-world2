package com.isointeractive.staralign{	import com.greensock.TweenLite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.display.MovieClip;	import flash.geom.Point;	import flash.events.Event;	import flash.events.KeyboardEvent;	import com.smartfoxserver.v2.SmartFox;	import com.smartfoxserver.v2.core.SFSEvent;	import com.smartfoxserver.v2.entities.*;	import com.smartfoxserver.v2.entities.data.*;	import com.smartfoxserver.v2.requests.*;	import com.smartfoxserver.v2.controllers.ExtensionController;	import com.smartfoxserver.v2.exceptions.SFSError;	public class StarAlign extends MovieClip {		var stoneArray:Array = new Array();		var walkingPathArray:Array = new Array();		var otherAvatarArray:Object = new Object();		var sfs:SmartFox;		//		public function StarAlign() {			traceOut("constructor");		}		//		public function init(vRoot:Object, smartFox:SmartFox) {			traceOut("init");			if (smartFox == null) {				sfs = new SmartFox();				sfs.loadConfig("sfs-config.xml");			} else {				sfs = smartFox;			}			sfs.debug = false;			addEventListener(Event.ENTER_FRAME, enterframe);			stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyboardDown);			stage.addEventListener(KeyboardEvent.KEY_UP,onKeyboardUp);			this.addEventListener(StarAlignEvent.GLOW_STONE_ACTIVATE, activateGlowStone);			sfs.addEventListener(SFSEvent.ROOM_JOIN, onJoin);			sfs.addEventListener(SFSEvent.EXTENSION_RESPONSE, onExtensionResponse);			sfs.addEventListener(SFSEvent.USER_EXIT_ROOM, onUserExitRoom);			avatar_mc.pos.x = avatar_mc.x;			avatar_mc.pos.y = avatar_mc.y;			avatar_mc.grav.y = .4;			initMoonStones();			sfs.send(new JoinRoomRequest('SA_1'));		}		//		private function onKeyboardDown(evt:KeyboardEvent):void {			switch (evt.keyCode) {				case 37 :					avatar_mc.moveLeft = true;					break;				case 38 :					avatar_mc.jump();					break;				case 39 :					avatar_mc.moveRight = true;					break;			}		}		//		private function onKeyboardUp(evt:KeyboardEvent):void {			trace(evt.keyCode);			switch (evt.keyCode) {				case 37 :					avatar_mc.moveLeft = false;					break;				case 39 :					avatar_mc.moveRight = false;					break;			}		}		//		private function enterframe(evt:Event):void {			if (! sfs) {				return;			}			avatar_mc.updateAvatar();			var avatarPoint:Point = new Point(avatar_mc.x,avatar_mc.y);			if (! avatar_mc.isStuck) {				for (var i:int = 0; i < walkingPathArray.length; i++) {					if (walkingPathArray[i].hitTestPoint(avatarPoint.x,avatarPoint.y,true)) {						avatar_mc.stickAvatarTo(walkingPathArray[i]);						break;					}				}			} else {				var repositionY:Number = avatar_mc.stuckClip.height * .5;				avatarPoint.y -=  repositionY;				while (repositionY > .01) {					repositionY *=  .5;					if (avatar_mc.stuckClip.hitTestPoint(avatarPoint.x,avatarPoint.y,true)) {						avatarPoint.y -=  repositionY;					} else {						avatarPoint.y +=  repositionY;					}				}				avatar_mc.pos.y = int(avatarPoint.y);				avatar_mc.updatePosition();			}			updateMyPosition();			//trace("Avatar on stage: " + avatar_mc.x + ", " + avatar_mc.y);		}		//		private function initMoonStones():void {			for (var i:int = 0; i < this.numChildren; i++) {				if (this.getChildAt(i) is MoonStone) {					stoneArray.push(this.getChildAt(i));				} else if (this.getChildAt(i) is WalkingPath) {					walkingPathArray.push(this.getChildAt(i));				}			}		}		//		private function activateGlowStone(evt:StarAlignEvent):void {			var stone:MoonStone = stoneArray[evt.param.stone];			stone.beginHighlight(evt.param.color, evt.param.time);			trace("STONE: " + evt.param.stone + " - " + stone.x);		}		//		private function addConstellation(constellation:ConstellationImage):void {			while (constellation_mc.numChildren > 0) {				constellation_mc.removeChildAt(0);			}			constellation_mc.addChild(constellation);			initializeConstellationPattern(constellation);			constellation.showConstellation();		}		//		private function initializeConstellationPattern(c:ConstellationImage):void {			trace("star length: " + c.timerArray.length);			for (var i:int = 0; i < c.timerArray.length; i++) {				TweenLite.delayedCall(60*c.timerArray[i].delay, createConstellationStar, [c.timerArray[i].yPos+278]);				trace(c.timerArray[i].yPos);			}		}		//		private function createConstellationStar(yPos:Number) {			starField_mc.createConstellationStar(yPos, 0xFF00FF);		}		//;		private function updateMyPosition():void {			if (sfs.lastJoinedRoom != null) {				var req:SFSObject = new SFSObject();				req.putDouble('x', avatar_mc.x);				req.putDouble('y', avatar_mc.y);				sfs.send(new ExtensionRequest('pos', req, sfs.lastJoinedRoom));			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// smartfox stuff		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//		private function onJoin(evt:SFSEvent):void {			traceOut("Room joined: " + evt.params.room.name);			updateMyPosition();		}		//		private function onExtensionResponse(evt:SFSEvent):void {			traceOut("Extension response: " + evt.params.cmd);			var p:SFSObject = evt.params.params;			switch (evt.params.cmd) {				case "pu" :					var av:OtherAvatarMC;					if (otherAvatarArray[p.getUtfString("p")] == null) {						av = new OtherAvatarMC();						addChild(av);						otherAvatarArray[p.getUtfString("p")] = av;					} else {						av = otherAvatarArray[p.getUtfString("p")];					}					av.x = p.getDouble("x");					av.y = p.getDouble("y");					break;				case "ns" :					//trace("New Constellation Star.");					starField_mc.createConstellationStar(p.getDouble("y"), Number(p.getUtfString("c")), p.getInt("st"), p.getInt("sp"), p.getInt("#"));					break;				case "as" :					//trace("Active Star " + p.getInt("#"));					starField_mc.activateStar(p.getInt("#"));					break;				case "ce" :					var c_mc:ConstellationImage;					if (p.getUtfString("id") == "wolf") {						c_mc = new Howling_Wolf_MC();						trace(Number(p.getUtfString("c")));						c_mc.setColor(Number(p.getUtfString("c")));					}					addConstellation(c_mc);					break;			}		}		//		private function onUserExitRoom(evt:SFSEvent):void {			var n:String = evt.params.user.name;			if (otherAvatarArray[n]) {				removeChild(otherAvatarArray[n]);				otherAvatarArray[n] = null;			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// tracing		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function traceOut(txt1) {			var txt2:String = "Star Align game: " + txt1;			trace(txt2);		}		//	}}