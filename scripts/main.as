package scripts{	import com.smartfoxserver.v2.util.ConnectionMode;	import flash.display.*;	import flash.events.*;	import flash.display.Stage;	import flash.net.URLVariables;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.geom.Point;	import flash.media.Sound;	import flash.media.SoundMixer;	import flash.media.SoundTransform;	import flash.net.SharedObject;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.navigateToURL;	import flash.external.ExternalInterface;	import flash.system.System;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;	import flash.net.URLLoader;	import flash.filters.*;	import flash.geom.ColorTransform;	import com.smartfoxserver.v2.SmartFox;	import com.smartfoxserver.v2.core.SFSEvent;	import com.smartfoxserver.v2.entities.*;	import com.smartfoxserver.v2.entities.data.*;	import com.smartfoxserver.v2.requests.*;	import com.smartfoxserver.v2.entities.variables.*;	import scripts.spriteSheetMaker;	import scripts.game.spawnObjects.moteSpawn;	import scripts.game.spawnObjects.goodsSpawn;	import scripts.encryption.Sha512;	///McU98ucb3m	public class main extends MovieClip {		private var gTesting:Boolean = false;		//smartfox		public var smartFox:SmartFox;		//private var gIP:String = "54.243.173.185";//natron baxter dev server		private var gIP:String = "23.21.131.232";//natron baxter dev server		//private var gIP:String = "75.127.127.64";//vm20 server		//private var gIP:String = "127.0.0.1";//local server		private var gPort:String = "9933";		private var evtQueue = [];		private var gZone:String = "TidesZone";		private var gExtensionName:String = "";		public var gUserName:String = "";		public var gPassword:String = "";		public var gRoomName:String = "The Lobby";//UP		private var pRoomIsSocial:Boolean = false;		private var gUserListObj:Object = {};		//		private var pCounter:int = 0;		private var gLoader:Loader = new Loader  ;		public var gCurrScreen:Object = null;		private var gCurrScreenNme:String = "";		public var gClosetAvatar:Object = null;		//movieclip instance objects		public var pInterface:Object = null;		public var pInterfaceTab:Object = null;		public var pChatLogObj:Object = null;		public var pChatLogTxt:String = "";		public var pPrivateChatList:Array = [];		public var pAvatarPopup:Object = null;		//random number generator		private var pRandomArray:Array = [];		private var pRcycle:int = 0;		//avatar		public var pMyAvatar:Object = {};		public var pAvatarsListObj:Object = {};		public var pClothingObjects:Object = {};		public var pClothingHolder:Object = null;		public var pHeroClothing:Object = {};		public var pArrayHair:Array = [];		public var pArrayShirt:Array = [];		public var pArrayPants:Array = [];		public var pArrayShoes:Array = [];		public var pAvatarLablesActive:Boolean = true;		public var pMyAvatarColors:SFSObject;		public var pMyAvatarItems:SFSObject;		//login attributes		public var gUID:int = 0;		public var gMyUserState:int = 0;		public var gIsGuest:Boolean = false;		public var gMyUserIsMod:Boolean = false;		public var pRoomGoods:ISFSArray = null;		public var pMyUserGoods:ISFSArray = null;		public var gUserLevel:int = 0;		public var gUserLevelString:String = "Beginner";		public var gUserDB_id:int = 0;		public var gAvatarDescription:String = "Basic";		//sounds		public var gVolume:Number = 100;		public var pBubblePopSnd:Sound = new bubblePopSound  ;		public var pSpawnCaptureSnd:Sound = new spawnCaptureSnd  ;		//  sprite sheets and blitting		public var pBlankScene:Class = null;		public var pSpriteSheets:Object = {};		private var pSheetsStarted:int = 0;		private var pSheetsDone:int = 0;		//spawns and moons		public var gRmoonPhase:int = 0;		public var gGmoonPhase:int = 0;		public var gBmoonPhase:int = 0;		//encryption		private var sha:Sha512;		//moderation		public var gModPanelObj:Object = null;		private var gModPw:String = "";		private var gMsgWindow:Object = null;		public var gModHelpRequests:Object = {};		//purchasing vars		private var gPurUrl:String = "http://ec2-23-21-121-27.compute-1.amazonaws.com/e-commerce/";		private var gPurUrl_v1:String = "http://ec2-23-21-121-27.compute-1.amazonaws.com/e-commerce_v1/";		private var gPurUrl_v2:String = "http://ec2-23-21-121-27.compute-1.amazonaws.com/e-commerce_v2/";		private var gPurPageLoader:Loader = new Loader  ;		//quest vars		public var pQuests:ISFSArray = null;		public var pMyQuestProgress:ISFSArray = null;		//NPC TESTING - TODO REMOVE		private var gNPCPageLoader:Loader = new Loader  ;		public var pNpcSWFobj:Object = null;		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// init		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function main():void {			traceOut("initA");			stop();			stage.focus = this;			stage.frameRate = 80;			loadSplashPage();			sha = new Sha512  ;			setVolume();			precalcRandomNums();			setClothingArrays();			loadSceneBase();		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// load splash page, preload assets and make spritesheets		// loadSplashPage & loadSceneBase --->createSpriteSheets --->loadClothingSet --->initB --->initSmartfox & loadLoginPage		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function loadSplashPage():void {			traceOut("main: loadSplashPage");			gCurrScreenNme = "splashPage";			gCurrScreen = new splashPageMC  ;			this.addChild(gCurrScreen);		}		//		private function loadSceneBase():void {			traceOut("loadSceneBase");			var assetPath:String = "scenes/blankScene.swf";			var lLoader:Loader = new Loader  ;			lLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,sceneBaseLoaded);			lLoader.load(new URLRequest(assetPath));		}		//		private function sceneBaseLoaded(e:Event):void {			traceOut("sceneBaseLoaded");			var swf = e.target;			pBlankScene = swf.applicationDomain.getDefinition("blankScene_10x3") as Class;			trace(pBlankScene);			createSpriteSheets();		}		//		private function createSpriteSheets():void {			traceOut("createSpriteSheets...");			pSpriteSheets = {};			var swf1:Object = new walkSmoke  ;			swf1.init(this,"pRunDust");			var swf2:Object = new claimPoint  ;			swf2.init(this,"pDisplayPoint");			var swf3:Object = new coin  ;			swf3.init(this,"coin");			var swf4:Object = new starSparkleMC  ;			swf4.init(this,"starSparkle");			var swf5:Object = new levitateAnim  ;			swf5.init(this,"levitateParticle");			var swf6:Object = new fireSparkAnim  ;			swf6.init(this,"fireSparkParticle");			pSheetsStarted = 6;		}		//		public function spriteSheetDone(vName:String,vSheet:Array):void {			pSheetsDone++;			traceOut(("spriteSheetComplete = " + [vName,pSheetsStarted,pSheetsDone]));			pSpriteSheets[vName] = vSheet;			if ((pSheetsDone == pSheetsStarted)) {				traceOut("All spriteSheets complete");				loadClothingSet(1);			}		}		//		private function loadClothingSet(n:int):void {			var setName:String = "clothingSet_" + n;			var assetPath:String = "clothing/" + setName + ".swf";			traceOut(("loadClothingSet= " + assetPath));			var lLoader:Loader = new Loader  ;			lLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,loadClothingSetDone);			lLoader.load(new URLRequest(assetPath));		}		//		private function loadClothingSetDone(e:Event):void {			traceOut("loadClothingSetDone");			pClothingHolder = e.target;			traceOut(("pClothingHolder = " + pClothingHolder));			var holder:Object = pClothingHolder.content["holder"];			var L:int = holder.numChildren;			for (var i:int = 0; i < L; i++) {				var mc:Object = holder.getChildAt(i);				var objName:String = getQualifiedClassName(mc);				var vClass:Class = pClothingHolder.applicationDomain.getDefinition(objName) as Class;				pClothingObjects[objName] = vClass;			}			initB();		}		//		private function initB():void {			traceOut("initB");			stage.frameRate = 30;			if (gTesting) {				loadSideScrollScene("hearth");			} else {				initSmartfox();				loadLoginPage();			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// main smartfox functions		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function initSmartfox() {			traceOut("Smartfox initializing");			smartFox = new SmartFox  ;			smartFox.addEventListener(SFSEvent.CONNECTION,onConnection);			smartFox.addEventListener(SFSEvent.CONNECTION_LOST,onConnectionLost);			smartFox.addEventListener(SFSEvent.CONFIG_LOAD_SUCCESS,onConfigLoadSuccess);			smartFox.addEventListener(SFSEvent.CONFIG_LOAD_FAILURE,onConfigLoadFailure);			smartFox.addEventListener(SFSEvent.EXTENSION_RESPONSE,onExtensionResponse);			smartFox.addEventListener(SFSEvent.LOGIN,handleLogin);			smartFox.addEventListener(SFSEvent.LOGIN_ERROR,handleLoginError);			smartFox.addEventListener(SFSEvent.ROOM_JOIN,onRoomJoined);			smartFox.addEventListener(SFSEvent.ROOM_JOIN_ERROR,onRoomJoinError);			smartFox.addEventListener(SFSEvent.USER_ENTER_ROOM,onUserEnterRoom);			smartFox.addEventListener(SFSEvent.USER_EXIT_ROOM,onUserExitRoom);			smartFox.addEventListener(SFSEvent.OBJECT_MESSAGE,onObjectMessage);			smartFox.addEventListener(SFSEvent.PUBLIC_MESSAGE,onPublicMessage);			smartFox.debug = false;		}		//		private function onConfigLoadSuccess(evt:SFSEvent):void {			traceOut("Config load success!");			traceOut(((("Server settings: " + smartFox.config.host) + ":") + smartFox.config.port));		}		//		private function onConfigLoadFailure(evt:SFSEvent):void {			traceOut("Config load failure!!!");		}		//		public function login():void {			traceOut(("logging in to: " + [gZone,gUserName,gPassword]));			gUserName = gCurrScreen.getLoginName();			gPassword = gCurrScreen.getLoginPW();			traceOut("login = " + [gUserName, gPassword]);			savePWcookie();			connect();		}		//		private function connect():void {			traceOut(("connecting to smartfox = " + gIP));			smartFox.connect(gIP,gPort);		}		//		private function onConnection(evt:SFSEvent):void {			traceOut(("connection result: " + evt.params.success));			if (evt.params.success) {				traceOut("Connection success");				loginB();			} else {				traceOut("Connection failure");			}		}		//		private function onConnectionLost(evt:SFSEvent):void {			traceOut(("Connection was lost. Reason: " + evt.params.reason));			loadLoginPage();		}		//		private function loginB():void {			trace(("loginB = " + gUserName));			var passEncrypt = sha.hex_sha512(gPassword);			smartFox.send(new LoginRequest(gUserName,passEncrypt,gZone));		}		//;		private function handleLogin(evt:SFSEvent):void {			traceOut("handleLogin");			if (evt.params.user) {				extractLoginData(evt.params);				if (gMyUserIsMod) {					gCurrScreen.getModPw();				} else {					goodLogin();				}			} else {				badLogin(evt.params);			}		}		//		private function handleLoginError(evt:SFSEvent):void {			traceOut(("handleLoginError: " + evt.params));			badLogin(evt.params);		}		//		public function goodLogin() {			traceOut("GoodLogin ");			var lx:int = 100 + Math.random() * 100;			if (gIsGuest) {				sendLocVars(lx,260);				loadSideScrollScene("hearth", lx, 260);			} else {				smartFox.send(new JoinRoomRequest("map"));				sendLocVars(lx,260);				loadSideScrollScene("hearth", lx, 260);				//loadMap();			}		}		//		private function badLogin(p:Object) {			var vErrorTxt:String = "" + p.errorMessage;			var vErrorCode:int = p.errorCode;			gCurrScreen.loginError(vErrorTxt,vErrorCode);		}		//;		public function relogin():void {			smartFox.killConnection();		}		//;		private function extractLoginData(obj:Object):void {			var vData:SFSObject = obj.data;			gUID = vData.getInt("uID");			gMyUserState = vData.getInt("userState");			gRmoonPhase = vData.getInt("RMoon");			gGmoonPhase = vData.getInt("GMoon");			gBmoonPhase = vData.getInt("BMoon");			pRoomGoods = vData.getSFSArray("Goods");			if (((gUID != 0) && gMyUserState != 1)) {				pMyUserGoods = vData.getSFSArray("UserGoods");				pMyQuestProgress = vData.getSFSArray("UserQuestProgress");				pQuests = vData.getSFSArray("Quests");				var userData:SFSObject = vData.getSFSArray("UserData").getSFSObject(0);				if (userData) {					gUserLevel = userData.getInt("LevelNumber");					if (gUserLevel) {						gUserLevelString = userData.getUtfString("LevelDescription");						//gUserDB_id= userData.getInt("idUser_Avatar");						gAvatarDescription = userData.getUtfString("Description");					}					//trace ("Extract user data = \r" + vData.getDump());					gUserLevel = userData.getInt(0);				}			} else {				gIsGuest = true;			}			gMyUserIsMod = false;			if ((gMyUserState == 99)) {				gMyUserIsMod = true;			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//cookies		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function savePWcookie():void {			if (gCurrScreen.pSavePWToggle == true) {				var cookieData1:Array = [gUserName,gPassword];				saveCookie("TidesLogin",cookieData1);			} else {				clearCookie("TidesLogin");			}		}		//		public function saveModPwCookie(pw:String):void {			gModPw = pw;			if (gModPw.length > 30) {				var cookieData1:Array = [pw];				saveCookie("TidesModPw",cookieData1);				loginMod();			}		}		//		private function saveCookie(cookieName:String,cookieData1:Array):void {			var cookie:SharedObject = SharedObject.getLocal(cookieName);			var cookieData2:String = cookieData1.toString();			cookie.data.dataList = cookieData2;			cookie.flush();			cookie.close();		}		//		private function clearCookie(cookieName:String):void {			var clearArray = [];			saveCookie(cookieName,clearArray);		}		//		public function retrieveCookie(cookieName:String):Array {			var cookie:SharedObject = SharedObject.getLocal(cookieName);			var cookieData1:Array = [];			if (cookie.data.dataList != undefined) {				var cookieData2:String = cookie.data.dataList;				if ((cookieData2 != "")) {					cookieData1 = cookieData2.split(",");				}			}			return cookieData1;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Registration page		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function loadRegistrationPage():void {			gCurrScreenNme = "registrationPage";			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,registrationPageLoaded);			gLoader.load(new URLRequest("registrationPage.swf"));			disconnect();		}		//;		private function registrationPageLoaded(evt:Event):void {			clearAllScreens();			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this);		}		//;		public function registrationDone(un:String,pw:String):void {			traceOut(("registrationDone = " + [un,pw]));			clearAllScreens();			gUserName = un;			gPassword = pw;			connect();		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//trove. Enter from hearth		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function loadTrove():void {			traceOut("load trove");			gCurrScreenNme = "trove";			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, troveLoaded);			gLoader.load(new URLRequest("trove.swf"));			clearAllScreens();		}		//		private function troveLoaded(evt:Event):void {			traceOut("trove loaded");			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this);			pRoomIsSocial = false;			gUserListObj = {};			smartFox.send(new JoinRoomRequest("trove"));		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Social rooms (sidescroll, not closet, login etc)		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//room name, entry point x and y		public function loadSideScrollScene(nme:String,lx:int,ly:int):void {			traceOut("loadSideScrollScene");			gRoomName = nme;			clearAllScreens();			sendLocVars(lx,ly);			gCurrScreen = new sceneSideScrollMC  ;			gCurrScreen.init(this,nme);		}		//;		public function sideScrollSceneReady():void {			traceOut("sideScrollSceneReady");			placeAllGoodsItems();			joinSocialRoom(gRoomName);			loadSceneInterface();			setUpInventory();			loadModPanel();		}		//		public function joinSocialRoom(nme:String):void {			traceOut(("joinSocialRoom = " + nme));			pRoomIsSocial = true;			gUserListObj = {};			smartFox.send(new JoinRoomRequest(nme));		}		//;		private function onRoomJoined(evt:SFSEvent):void {			traceOut(("onRoomJoined: " + evt.params.room));			if (pRoomIsSocial) {				initChatLogText();				var rm:SFSRoom = evt.params.room;				var userList:Array = rm.userList;				birthAllUsers(userList);			}		}		//		public function wayPointJump(dest:String,vtype:String):void {			//smartFox.send(new LeaveRoomRequest());			traceOut(("wayPointJump from " + vtype));			pMyAvatar.deleteMe();			if ((dest == "closet")) {				clearAllScreens();				loadCloset();			}			if ((dest == "map")) {				clearAllScreens();				loadMap();			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Avatars: birthing, entering, leaving etc		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function onRoomJoinError(evt:SFSEvent):void {			traceOut(("Room joining failed: " + evt.params.errorMessage));		}		//		private function onUserEnterRoom(evt:SFSEvent):void {			traceOut("onUserEnterRoom");			var vUser:User = evt.params.user;			birthUser(vUser);		}		//		private function onUserExitRoom(evt:SFSEvent):void {			traceOut("onUserExitRoom");			var vUser:User = evt.params.user;			var rm:Room = evt.params.room;			var rmNme = rm.name;			if ((rmNme == gRoomName)) {				var id:int = vUser.id;				deleteAvatarByID(id);			}		}		//		private function disconnect() {			smartFox.disconnect();		}		//;		private function birthAllUsers(userList:Array):void {			traceOut(("birthAllUsers = " + userList));			pMyAvatar = null;			pAvatarsListObj = {};			for (var i = 0; i < userList.length; i++) {				var vUser:User = userList[i];				birthUser(vUser);			}		}		//		private function birthUser(vUser:User):void {			var vIsMe:Boolean = vUser.isItMe;			lx = vUser.getVariable("x1").getIntValue();			ly = vUser.getVariable("y1").getIntValue();			var id:int = vUser.id;			var nme:String = vUser.name;			var avatarColors:SFSObject = vUser.getVariable("Avatar").getSFSObjectValue();			var avatarItems:SFSObject = vUser.getVariable("AvatarItems").getSFSObjectValue();//			trace ("avatarColors = \r" + avatarColors.getDump());//			trace ("avatarItems = \r" + avatarItems.getDump());			var ava:Object = new avatarBaseMC  ;			var vAvatarSize = gCurrScreen.pSceneAttributes.pAvatarSize;			var isGuest:Boolean = false;			ava.init(id, 2, this, this.stage, gCurrScreen, nme, vIsMe, isGuest, lx, ly, vAvatarSize, avatarColors, avatarItems);			pAvatarsListObj[id] = ava;			if (vIsMe) {				pMyAvatar = ava;				pMyAvatarColors = avatarColors;				pMyAvatarItems = avatarItems;			}		}		//		private function deleteAllAvatars():void {			traceOut("deleteAllAvatars");			for (i in pAvatarsListObj) {				var ava:Object = pAvatarsListObj[i];				ava.deleteMe();			}			pAvatarsListObj = {};		}		//		public function deleteAvatarByID(id:int):void {			var ava:Object = pAvatarsListObj[id];			if (ava) {				ava.deleteMe();				delete pAvatarsListObj[id];			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// sending and receiving data		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function sendArrayCommandAll(cmd:String,vData:Array):void {			//trace ("sendArrayCommandAll = " + vData);			var dataObj:ISFSObject = new SFSObject  ;			dataObj.putUtfString("cmd",cmd);			dataObj.putIntArray("data",vData);			smartFox.send(new ObjectMessageRequest(dataObj));		}		//;		private function onObjectMessage(evt:SFSEvent):void {			var dataObj:ISFSObject = evt.params.message as SFSObject;			var sender:User = evt.params.sender;			var cmd:String = dataObj.getUtfString("cmd");			var vData:Array = dataObj.getIntArray("data");			var id:int = sender.id;			var ava:Object = pAvatarsListObj[id];			switch (cmd) {				case "tmd" :					ava.receiveMotionData(vData);					break;				case "portalActivate" :					portalActivate(true,vData);					break;				case "portalDeactivate" :					portalActivate(false,vData);					break;			}			//traceOut ("onObjectMessage = " +id + " // " + cmd + " // " + vData);		}		//		private function onExtensionResponse(evt:SFSEvent):void {			var cmd = evt.params.cmd;			var vData:SFSObject = evt.params["params"];			//traceOut("extension response cmd = " + cmd);			if (cmd in this) {				this[cmd](vData);			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// chatting		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------				//sent from isMe avatar when return key is pressed		public function sendChat():void {			var txt:String = pInterface.chatTxt.text;			if ((txt != "")) {				smartFox.send(new PublicMessageRequest(txt));				pInterface.chatTxt.text = "";			}		}		//		private function onPublicMessage(evt:SFSEvent):void {			trace("onPublicMessage");			var txt:String = evt.params.message;			var luser:User = evt.params.sender;			var nme:String = luser.name;			var ava:Object = pAvatarsListObj[luser.id];			ava.takeChat(txt);			recordChatLog(nme,txt);		}		//		private function initChatLogText():void {			pChatLogTxt = pChatLogTxt + "---------------------" + "\r";			pChatLogTxt = pChatLogTxt + "You enter: " + gRoomName + "\r";			pChatLogObj.chatLogTxt.text = pChatLogTxt;		}		//		private function recordChatLog(nme:String,txt:String):void {			pChatLogTxt = pChatLogTxt + nme + ": " + txt + "\r";			if (pChatLogObj) {				pChatLogObj.chatLogTxt.text = pChatLogTxt;				var NumLines:int = pChatLogObj.chatLogTxt.numLines;				if ((NumLines > 30)) {					var scrollN:int = 1 * (NumLines - 30);					pChatLogObj.chatLogTxt.scrollV = scrollN;				}			}		}		//		public function startPrivateChat():void{			traceOut("startPrivateChat");		}		//		public function endPrivateChat():void{			traceOut("endPrivateChat");		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//Avatar popup interface for private chat		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function createAvatarPopup():void {			pAvatarPopup = new avatarPopup  ;			this.addChild(pAvatarPopup);			closeAvatarPopup();		}		//		public function openAvatarPopup(nme:String, lx:int, ly:int):void {			pAvatarPopup.userName.text = nme;			pAvatarPopup.x = lx;			pAvatarPopup.y = ly;			pAvatarPopup.visible = true;			pAvatarPopupActive = true;		}		//		public function closeAvatarPopup():void {			pAvatarPopup.userName.text = "";			pAvatarPopup.visible = false;			pAvatarPopupActive = false;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// userVariables		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//sent from isMe avatar		public function sendLocVars(vx1:int,vy1:int):void {			//traceOut("sendLocVars");			var userVars:Array = [];			userVars.push(new SFSUserVariable("x1",vx1));			userVars.push(new SFSUserVariable("y1",vy1));			smartFox.send(new SetUserVariablesRequest(userVars));		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------;		// login page		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function loadLoginPage():void {			traceOut("main: loadLoadingScreen");			clearAllScreens();			gCurrScreenNme = "loginPage";			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,loaderPageLoaded);			gLoader.load(new URLRequest("loginPage.swf"));		}		//;		private function loaderPageLoaded(evt:Event):void {			clearAllScreens();			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this);		}		//;		public function clearAllScreens():void {			traceOut(" clearing all screens");			if (! gCurrScreen) {				traceOut("Screen is already deleted");				return;			}			if (pRoomIsSocial) {				deleteAllAvatars();				gCurrScreen.deleteMe();			}			var L = this.numChildren;			if ((L > 0)) {				for (var i = 0; i < L; i++) {					var mc:Object = this.getChildAt(0);					if ("deleteMe" in mc) {						trace(("delete: " + mc));						mc.deleteMe();					}					this.removeChild(mc);				}			}			gCurrScreen = null;			pMyAvatar = null;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// closet		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function loadCloset():void {			traceOut(" load Closet");			pRoomIsSocial = false;			gUserListObj = {};			smartFox.send(new JoinRoomRequest("closet"));			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,closetLoaded);			gLoader.load(new URLRequest("closet.swf"));			gCurrScreenNme = "closet";		}		//		private function closetLoaded(evt:Event):void {			clearAllScreens();			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this);		}		//;		public function loadMap():void {			clearAllScreens();			smartFox.send(new JoinRoomRequest("map"));			pRoomIsSocial = false;			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,mapLoaded);			gLoader.load(new URLRequest("map.swf"));			gCurrScreenNme = "map";		}		//;		private function mapLoaded(evt:Event):void {			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this);		}		//------------------------------------------------------------------------------------------------------------------------;		//------------------------------------------------------------------------------------------------------------------------;		// center a scene and prepare the sidescroller and avatars		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function loadSceneInterface():void {			pInterface = new interfaceMC  ;			pInterface.y = 458;			this.addChild(pInterface);			pInterface.visible = false;			pInterfaceTab = new interfaceBarTabMC  ;			pInterfaceTab.x = 950;			pInterfaceTab.y = 500;			this.addChild(pInterfaceTab);			pChatLogObj = new chatLogMc  ;			this.addChild(pChatLogObj);			pChatLogObj.visible = false;			if (! gMyUserIsMod) {				pInterface.openModPanelBtn.visible = false;			}		}		//		public function toggleSceneInterface():void {			if (pInterface.visible) {				pInterface.visible = false;				pInterfaceTab.visible = true;				stage.focus = null;			} else {				stage.focus = pInterface.chatTxt;				pInterface.visible = true;				pInterfaceTab.visible = false;			}		}		//		public function toggleLables():void {			if (pAvatarLablesActive) {				pAvatarLablesActive = false;			} else {				pAvatarLablesActive = true;			}		}		//		public function toggleChatLog():void {			if (pChatLogObj.visible == true) {				pChatLogObj.visible = false;			} else {				pChatLogObj.visible = true;			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Avatar shared functions and info		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function createAvatar():Object {			var ava:Object = new avatarBaseMC  ;			return ava;		}		//		private function setClothingArrays():void {			pHeroClothing = {};			pHeroClothing.pHair = 0;			pHeroClothing.pShirt = 0;			pHeroClothing.pPants = 0;			pHeroClothing.pShoes = 0;			pArrayHair = ["hair_0","hair_1","hair_2"];			pArrayShirt = ["shirt_0","shirt_1","shirt_2","shirt_3","shirt_4","shirt_5","shirt_6","shirt_7","shirt_8","shirt_9","shirt_10"];			pArrayPants = ["pants_0","pants_1","pants_2","pants_3"];			pArrayShoes = ["shoe_0","shoe_1","shoe_2","shoe_3","shoe_4","shoe_5",];		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// spawns, dust motes 		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//sent by extension when user enters a room that contains spawns		private function takeSpawns(spawnList:SFSObject):void {			traceOut(("takeMoteObjects for room " + gRoomName));			if (! pRoomIsSocial) {				return;			}			var keys:Array = spawnList.getKeys();			var L = keys.length;			for (var i:int = 0; i < L; i++) {				var key:String = keys[i];				var spawnData:Array = spawnList.getIntArray(key);				placeMote(0,spawnData);			}		}		//sent from spawner extension when new spawn birthed		private function spawnBirthed(obj:SFSObject):void {			//traceOut("spawnBirthed");			var spawnData:Array = obj.getIntArray("sp");			placeMote(1,spawnData);		}		//place a mote spawn in the scene		private function placeMote(vState:int,spawnData:Array):void {			var id:int = spawnData[0];			var vType:int = spawnData[1];			var lx:int = spawnData[2];			var ly:int = 25;			var mote:Object = new moteSpawnMC  ;			gCurrScreen.pL3Interactive.addChild(mote);			mote.name = "mote_" + id;			mote.init(this,gCurrScreen,id,vType,vState,lx,ly);		}		//sent to spawner extension wen user has found a spawn		public function claimSpawn(id:int):void {			var obj:ISFSObject = new SFSObject  ;			obj.putUtfString("cmd","claim");			obj.putUtfString("rm",gRoomName);			obj.putInt("id",id);			obj.putUtfString("cmd2","ClaimDust");			smartFox.send(new ExtensionRequest("set",obj));		}		//sent from spawner extension;		private function spawnClaimed(obj:SFSObject):void {			var spawnId:int = obj.getInt("id");			var userId:int = obj.getInt("uid");			var spawnType:int = obj.getInt("type");			var ava:Object = pAvatarsListObj[userId];			removeMoteById(spawnId);			if (ava) {				ava.displayAddPoint(spawnType);			}		}		//remove mote from scene and from list		public function removeMoteById(id:int) {			if (this.gCurrScreen.pL3Interactive) {				var nme:String = "mote_" + id;				var mote = gCurrScreen.pL3Interactive.getChildByName(nme);				if (mote) {					mote.deleteMe();				}			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// findable objects such as scrolls in room. goods.		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function placeAllGoodsItems():void {			traceOut("placeAllGoodsItems");			var L:int = pRoomGoods.size();			for (var i = 0; i < L; i++) {				var item:SFSObject = pRoomGoods.getElementAt(i);				var rmName:String = item.getUtfString("AreaName");				if (((rmName == gRoomName) || rmName == "meadows1")) {					placeGoodsItem(item);				}			}		}		//		private function placeGoodsItem(item:SFSObject):void {			var id:int = item.getInt("idGoods");			var owns:Boolean = false;			if (! gIsGuest) {				owns = checkUserOwnsGood(id);			}			if ((owns == false)) {				var lx:int = item.getInt("x");				var ly:int = item.getInt("y");				var vType:int = item.getInt("idGoodsType");				switch (vType) {					case 1 :					case 2 :					case 3 :						placeScroll(id,vType, lx, ly);						break;				}			}		}		//		private function placeScroll(id:int, vType:int, lx:int, ly:int):void {			var obj:Object = new scrollSpawnMC  ;			gCurrScreen.pL3Interactive.addChild(obj);			obj.name = "scroll_" + id;			obj.x = lx;			obj.y = ly;			obj.init(this,gCurrScreen,id,vType);		}		//		public function claimScroll(id:int):void {			traceOut("claimScroll = " + id);			var obj:ISFSObject = new SFSObject  ;			obj.putInt("id",id);			obj.putUtfString("cmd2","ClaimGood");			smartFox.send(new ExtensionRequest("set",obj));			var vScroll:SFSObject = pRoomGoods.getSFSObject(id);			if (vScroll) {				loadScrollSwf(id);			}		}		//		public function loadScrollSwf(id:int) {			traceOut("showScroll id = " + id);			var url = "scrolls/scroll_" + id + ".swf";			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,scrollSwfLoaded);			gLoader.load(new URLRequest(url));		}		//		private function scrollSwfLoaded(e:Event):void {			traceOut("scrollLoaded");			pMyAvatar.freezeAvatar();			var obj:Object = gLoader.content as MovieClip;			if (obj) {				obj.x = Math.round(500 - (obj.width/2));				obj.y = Math.round(250 - (obj.height/2));				this.addChild(obj);				obj.init(this);			}		}		//sent by scroll when user clicks to finish with it		public function scrollDisplayDone():void {			pMyAvatar.unFreezeAvatar();		}		//;		private function gotGood(obj:SFSObject) {			traceOut("New user goods received");			pMyUserGoods = obj.getSFSArray("UserGoods");			setUpInventory();		}		//		public function removeGoodsItemById(id:int):void {			if (gIsGuest) {				return;			}			if (gCurrScreen.pL3Interactive) {				var nme:String = "scroll_" + id;				var obj:Object = gCurrScreen.pL3Interactive[nme];				if (obj) {					obj.deleteMe();				}			}		}		//		private function checkUserOwnsGood(id1:int):Boolean {			var owns:Boolean = false;			var L:int = pMyUserGoods.size();			for (var i = 0; i < L; i++) {				var item:SFSObject = pMyUserGoods.getSFSObject(i);				var id2:int = item.getInt("Goods_idGoods");				if ((id1 == id2)) {					return true;				}			}			return owns;		}		//		private function setUpInventory() {			if (gIsGuest) {				return;			}			return;			while (pInterface.inventoryList_mc.list_mc.numChildren != 2) {				pInterface.inventoryList_mc.list_mc.removeChildAt(2);			}			var lastX:uint = 5;			var lastY:uint = 50;			var lastW:uint = 0;			var lastH:uint = 0;			var nextY:uint = 0;			var coins:uint = 0;			for (var i:uint = 0; i < pMyUserGoods.size(); i++) {				var item:SFSObject = pMyUserGoods.getSFSObject(i);				var item2:SFSObject = pRoomGoods.getSFSObject(item.getInt('Goods_idGoods') - 1);				var itemName:String = item2.getUtfString('GoodsDescription');				var mc:MovieClip;				//traceOut('setUpInventory, itemName ' + itemName);				switch (itemName) {					case 'Coin' :						coins++;						if ((coins == 1)) {							mc = new coin  ;							mc.name = 'coin';						}						break;					case 'TestScroll1' :					case 'TestScroll2' :						mc = new spawnScrollBlue  ;						mc.buttonMode = true;						mc.scrollText = item2.getUtfString('ScrollText');						mc.addEventListener(MouseEvent.CLICK,showThisScroll);						break;					default :						mc = new spawnScrollBlue  ;						break;				}				mc.x = lastX;				lastW = mc.width;				if (((lastX + lastW) > 156)) {					mc.x = lastX = 5;					lastY +=  nextY;				}				mc.y = lastY;				lastX +=  lastW + 5;				lastH = mc.height;				if (((lastH - 5) > nextY)) {					nextY = lastH + 5;				}				pInterface.inventoryList_mc.list_mc.addChild(mc);			}			if ((coins > 0)) {				pInterface.inventoryList_mc.list_mc.getChildByName('coin').amount_txt.text = coins;			}		}		public function showInventory() {			pInterface.inventoryList_mc.play();		}		function showThisScroll(e:MouseEvent=null) {			traceOut("showThisScroll = " + e.target.name);			trace("showThisScroll = "  + e.target.scrollText);			showScroll(e.target.scrollText);		}		//		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// portals		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function portalActivate(vActive:Boolean,vData:Array):void {			var id:int = vData[0];			var nme:String = "pp_" + id;			if (gCurrScreen) {				if (gCurrScreen.pL3Interactive) {					var portal:Object = gCurrScreen.pL3Interactive[nme];					if (portal) {						if (vActive) {							portal.portalActivate();						} else {							portal.portalDeactivate();						}					}				}			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// minigames		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function loadGameStarAlign():void {			clearAllScreens();			pRoomIsSocial = false;			gRoomName = "starAlign";			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, starAlignLoaded);			gLoader.load(new URLRequest( "starAlign/scene_starAlign.swf"));		}		//		private function starAlignLoaded(e:Event):void {			traceOut("starAlignLoaded");			clearAllScreens();			gCurrScreen = gLoader.content as MovieClip;			this.addChild(gCurrScreen);			gCurrScreen.init(this, smartFox);		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------;		// mod functions		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function loginMod():void {			traceOut("loginMod");			var obj:ISFSObject = new SFSObject  ;			obj.putUtfString("cmd2","Login");			obj.putInt("targetID",-1);			smartFox.send(new ExtensionRequest("modCmd",obj));		}		//;		private function loadModPanel():void {			if (! gMyUserIsMod || gModPw.length < 30) {				gMyUserIsMod = false;				return;			}			traceOut("loadModPanel");			var url = "modPanel/" + gModPw + "/modPanel.swf";			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,modPanelLoaded);			gLoader.load(new URLRequest(url));		}		//;		private function modPanelLoaded(e:Event):void {			traceOut("modPanelLoaded");			gModPanelObj = gLoader.content as MovieClip;			if (gModPanelObj) {				this.addChild(gModPanelObj);				gModPanelObj.init(this);			}		}		//;		public function toggleModPanel():void {			traceOut("toggleModPanel");			if ((gModPanelObj && gMyUserIsMod)) {				gModPanelObj.toggleModPanel();			}		}		//;		public function callModForHelp():void {			traceOut("call mod for help");			if (! pMyAvatar) {				return;			}			var obj:ISFSObject = new SFSObject  ;			obj.putUtfString("cmd2","Help");			obj.putInt("targetID",pMyAvatar.pId);			obj.putInt("X",pMyAvatar.x1);			obj.putInt("Y",pMyAvatar.y1);			smartFox.send(new ExtensionRequest("modCmd",obj));			openModMsgWindow("Request Sent:","Your request for help has been sent. If there is a moderator available, one will arrive shortly.");		}		//		private function modCmdHelp(vData:SFSObject):void {			var nme:String = vData.getUtfString("name");			var rmName:String = vData.getUtfString("rmName");			var lx:int = vData.getInt("X");			var ly:int = vData.getInt("Y");			var vDate:Date = new Date  ;			var hours:int = vDate.hours;			if ((hours > 12)) {				hours = hours - 12;			}			var time:String = hours + ":" + vDate.minutes;			var helpRequest:Array = [nme,rmName,time,lx,ly];			gModHelpRequests[nme] = helpRequest;			if (gModPanelObj) {				gModPanelObj.helpRequested();			}		}		//;		public function jumpToModRequest(vRoom:String,lx:int,ly:int):void {			if (! gMyUserIsMod) {				return;			}			smartFox.send(new LeaveRoomRequest  );			pRoomIsSocial = true;			lx + lx + Math.random() - Math.random() * 30;			ly = ly - 25;			loadSideScrollScene(vRoom,lx,ly);		}		//		private function modCmdAnnounce(vData:SFSObject):void {			var txt:String = vData.getUtfString("Msg");			openModMsgWindow("Announcement:",txt);		}		//		private function modCmdModMsg(vData:SFSObject):void {			var txt:String = vData.getUtfString("Msg");			openModMsgWindow("Moderator Message:",txt);		}		//		private function openModMsgWindow(vTitle:String,vTxt:String):void {			if (gMsgWindow) {				closeModMsgWindow();			}			if (((vTxt != null) && vTxt != "")) {				gMsgWindow = new msgWindowMC  ;				this.addChild(gMsgWindow);				gMsgWindow.x = 350;				gMsgWindow.y = 100;				gMsgWindow.msgTitle.text = vTitle;				gMsgWindow.msgTxt.text = vTxt;			}		}		//		public function closeModMsgWindow():void {			traceOut("closeModMsgWindow");			if (gMsgWindow) {				if (this.gMsgWindow) {					this.removeChild(gMsgWindow);					gMsgWindow = null;				}			}		}		//		private function modTakeUserInfo(vData:SFSObject):void {			if ((gModPanelObj && gMyUserIsMod)) {				gModPanelObj.takeUserInfo(vData);			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------;		// sound		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function changeVolume(vNewVol:int):void {			gVolume = vNewVol;			if ((gVolume < 0)) {				gVolume = 100;			}			setVolume();			playSound(pBubblePopSnd,100,1);		}		//		private function setVolume():void {			var lVol:Number = gVolume / 100;			SoundMixer.soundTransform = new SoundTransform(lVol);		}		//		public function playSound(vsnd:Sound,vol:int,num:int):void {			var snd = vsnd;			var trans = new SoundTransform  ;			trans.volume = vol / 100;			var chan = snd.play(0,num);			chan.soundTransform = trans;		}		//		public function playSndVolByDist(snd:Sound,lx2:int,ly2:int,vRange:int,volume1:Number):void {			var lx1:int = pMyAvatar.x1;			var ly1:int = pMyAvatar.y1;			var dist:int = calcDistance(lx1,ly1,lx2,ly2);			var volume2:Number = (((vRange - dist) / vRange) * volume1);			if ((volume2 < 0)) {				volume2 = 0;			}			if ((volume2 > 1)) {				volume2 = 1;			}			//traceOut ("volume2 = " + [volume1, volume2])			var trans = new SoundTransform  ;			trans.volume = volume2;			var chan = snd.play();			chan.soundTransform = trans;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// custom random number generator		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function precalcRandomNums():void {			traceOut("precalcRandomNums");			for (var i = 0; i < 1000; i++) {				var r1:int = Math.random() * 1000;				var r2:Number = r1 / 1000;				pRandomArray.push(r2);			}		}		//;		public function rand():Number {			pRcycle++;			if ((pRcycle > 999)) {				pRcycle = 0;			}			var r:Number = pRandomArray[pRcycle];			return r;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// shared calculation functions		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function calcAngle(x1,y1,x2,y2):Number {			var radians = Math.atan2((y2 - y1),x2 - x1);			var degrees = Math.round(((radians * 180) / Math.PI)) + 90;			if ((degrees < 0)) {				degrees = degrees + 360;			}			return degrees;		}		//--------------------------------------------------------------------------		//--------------------------------------------------------------------------		// Calculate the distance between 2 points		//--------------------------------------------------------------------------		//--------------------------------------------------------------------------		public function calcDistance(x1:int,y1:int,x2:int,y2:int):int {			var x_cord:int = x2 - x1;			var y_cord:int = y2 - y1;			var distance:int = Math.sqrt(((x_cord * x_cord) + y_cord * y_cord));			return distance;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Purchasing		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//MJF		public function LaunchPurchasing(v:int=0):void {			if (gIsGuest) {				return;			}			var variables:URLVariables = new URLVariables  ;			variables.userID = gUID;			var eComUrl:URLRequest = new URLRequest  ;			if ((v == 1)) {				eComUrl.url = gPurUrl_v1;			} else if ((v == 2)) {				eComUrl.url = gPurUrl_v2;			} else {				eComUrl.url = gPurUrl;			}			eComUrl.data = variables;			try {				navigateToURL(eComUrl,"_blank");			} catch (e:Error) {				//add handle error			}			var purPage:URLRequest = new URLRequest("Purchasing.swf");			gPurPageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,onFinishedLoading);			gPurPageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onErrorHandler);			addEventListener("Finished",onFinishedPurchase);			addEventListener("Canceled",onCancelPurchase);			gPurPageLoader.load(purPage);		}		private function onFinishedLoading(event:Event):void {			//need to stop all input			addChild(gPurPageLoader);		}		private function onErrorHandler(event:Event):void {			trace("didnt work");		}		private function onFinishedPurchase(event:Event):void {			//send update mote request to sfs			removeEventListener("Finished",onFinishedPurchase);			removeEventListener("Canceled",onCancelPurchase);			gPurPageLoader.unloadAndStop();			removeChild(gPurPageLoader);			//bring  input back		}		private function onCancelPurchase(event:Event):void {			removeEventListener("Finished",onFinishedPurchase);			removeEventListener("Canceled",onCancelPurchase);			gPurPageLoader.unloadAndStop();			removeChild(gPurPageLoader);			//bring input back		}		//		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//Dorm room		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//		public function loadDormRoom() {			clearAllScreens();			smartFox.send(new JoinRoomRequest("dormroom"));			gLoader = new Loader();			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, dormRoomLoaded);			gLoader.load(new URLRequest("Dorm Room.swf"));		}		private function dormRoomLoaded(e:Event) {			gCurrScreen = gLoader.content as MovieClip;			addChild(gCurrScreen);			trace('gCurrScreen ' + gCurrScreen);			gCurrScreen.init(this);		}		public function dormRoomLoadCloset() {			clearAllScreens();			loadCloset();		}		public function updateDormRoom(o:Object) {			trace('updateDormRoom');			var obj:ISFSObject = new SFSObject();			obj.putInt('WallColor', o.wallColor);			trace('wall color ' + o.wallColor);			obj.putInt('TrimColor', o.trimColor);			obj.putInt('FloorColor', o.floorColor);			obj.putInt('Lights', o.lights);			obj.putInt('Plants', o.plants);			obj.putInt('Basket', o.basket);			obj.putUtfString("cmd2", "UpdateDormRoom");			smartFox.send(new ExtensionRequest("set", obj));			trace('sent to smartfox');		}		public function closeDormRoom() {			gCurrScreen.deleteMe();			clearAllScreens();			var lx:int = 100 + Math.random() * 100;			loadSideScrollScene("meadow1", lx, 260);		}		public function getDormRoomInfo() {			var obj:ISFSObject = new SFSObject();			obj.putUtfString("cmd2", "DormRoomItems");			smartFox.send(new ExtensionRequest("get", obj));			getQuestProgress();		}		/*		 *------------------------------------------------------------------------------------------------------------------------		 *------------------------------------------------------------------------------------------------------------------------		 * Chromograph		 *------------------------------------------------------------------------------------------------------------------------		 *------------------------------------------------------------------------------------------------------------------------		*/		public function loadChromograph() {			trace('[Main: loadChromograph]');			clearAllScreens();			smartFox.send(new JoinRoomRequest("dormroom"));			gLoader = new Loader();			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, chromoLoaded);			gLoader.load(new URLRequest("ChromographMain.swf"));		}				private function chromoLoaded(e:Event) {			gCurrScreen = gLoader.content as MovieClip;			addChild(gCurrScreen);			trace('gCurrScreen ' + gCurrScreen);			//gCurrScreen.init(this);		}				/*public function dormRoomLoadCloset() {			clearAllScreens();			loadCloset();		}*/				/*public function updateDormRoom(o:Object) {			trace('updateDormRoom');			var obj:ISFSObject = new SFSObject();			obj.putInt('WallColor', o.wallColor);			trace('wall color ' + o.wallColor);			obj.putInt('TrimColor', o.trimColor);			obj.putInt('FloorColor', o.floorColor);			obj.putInt('Lights', o.lights);			obj.putInt('Plants', o.plants);			obj.putInt('Basket', o.basket);			obj.putUtfString("cmd2", "UpdateDormRoom");			smartFox.send(new ExtensionRequest("set", obj));			trace('sent to smartfox');		}*/				/*public function closeDormRoom() {			gCurrScreen.deleteMe();			clearAllScreens();			var lx:int = 100 + Math.random() * 100;			loadSideScrollScene("meadow1", lx, 260);		}*/				/*public function getDormRoomInfo() {			var obj:ISFSObject = new SFSObject();			obj.putUtfString("cmd2", "DormRoomItems");			smartFox.send(new ExtensionRequest("get", obj));			getQuestProgress();		}*/		/*		 *------------------------------------------------------------------------------------------------------------------------		 *------------------------------------------------------------------------------------------------------------------------		 * Quest		 *------------------------------------------------------------------------------------------------------------------------		 *------------------------------------------------------------------------------------------------------------------------		*/		private function getQuestProgress() {			var obj:ISFSObject = new SFSObject();			obj.putUtfString("cmd2", "QuestItems");			smartFox.send(new ExtensionRequest("get", obj));		}		public function getQuestItems(o:SFSObject) {			var i:ISFSArray = o.getSFSArray("QuestItems");			var a:Array = new Array();			var count:uint = 0;			for (var j:uint = 0; j < i.size(); j++) {				if (i.getSFSObject(j).getInt('IsQuestCompleted') == 1) {					a[count] = i.getSFSObject(j).getInt('Quest_idQuest');					count++;				}				/*a[0] = i.getSFSObject(0).getInt('WallColor');				a[1] = i.getSFSObject(0).getInt('TrimColor');				a[2] = i.getSFSObject(0).getInt('FloorColor');				a[4] = i.getSFSObject(0).getInt('Lights');				a[5] = i.getSFSObject(0).getInt('Plants');				a[6] = i.getSFSObject(0).getInt('Basket');*/				if (gCurrScreen != null) {					//gCurrScreen.setUpQuestItems(a);				}			}		}		public function getDormRoomItems(o:SFSObject) {			var i:ISFSArray = o.getSFSArray("DormRoomItems");			var a:Array = new Array();			if (i.size() > 0) {				a[0] = i.getSFSObject(0).getInt('WallColor');				a[1] = i.getSFSObject(0).getInt('TrimColor');				a[2] = i.getSFSObject(0).getInt('FloorColor');				a[4] = i.getSFSObject(0).getInt('Lights');				a[5] = i.getSFSObject(0).getInt('Plants');				a[6] = i.getSFSObject(0).getInt('Basket');				if (gCurrScreen != null) {					gCurrScreen.pSwfObj.setUpDormRoom(a);				}			} else {				var obj:ISFSObject = new SFSObject();				obj.putUtfString("cmd2", "SaveDormRoom");				smartFox.send(new ExtensionRequest("set", obj));			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//Testing NPC - TODO REMOVE		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function LaunchNPC():void {			if (gIsGuest) {				return;			}			var npcPage:URLRequest = new URLRequest("NPC.swf");			gNPCPageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,onLoadingDone);			gNPCPageLoader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onErrHandler);			addEventListener("Exit",onExitNPC);			gNPCPageLoader.load(npcPage);		}		//;		private function onLoadingDone(event:Event):void {			//need to take input focus off game			pNpcSWFobj = gNPCPageLoader.content as MovieClip;			pNpcSWFobj.init(this);			addChild(gNPCPageLoader);		}		//		private function onErrHandler(event:Event):void {			trace("didnt work");		}		//		private function onExitNPC(event:Event):void {			removeEventListener("Exit",onExitNPC);			gNPCPageLoader.unloadAndStop();			removeChild(gNPCPageLoader);			pNpcSWFobj = null;			//bring  input focus back to game		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Quests 		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function getUpdateQuest(obj:SFSObject) {			pMyQuestProgress = obj.getSFSArray("UpdateQuest");			if ((pNpcSWFobj != null)) {				pNpcSWFobj.getUpdateQuestProgress();			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// tracing		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function traceOut(txt1) {			var txt2:String = "Main: " + txt1;			trace(txt2);		}		//		private function traceObject(obj):void {			trace("-------------");			trace("main: tracing object contents:");			for (var i in obj) {				var txt = i + ":  " + obj[i];				trace(txt);			}			trace("-------------");		}		//	}}