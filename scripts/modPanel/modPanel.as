package scripts.modPanel{	import flash.display.*;	import flash.events.*;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.net.*;	import com.smartfoxserver.v2.SmartFox;	import com.smartfoxserver.v2.core.SFSEvent;	import com.smartfoxserver.v2.entities.*;	import com.smartfoxserver.v2.entities.data.*;	import com.smartfoxserver.v2.requests.*;	import com.smartfoxserver.v2.entities.variables.*;	import flash.media.Sound;	//	public class modPanel extends MovieClip {		private var pRoot:Object = null;		private var pDragging:Boolean = false;		private var pDragX:int = 0;		private var pDragY:int = 0;		private var pTargetId:int = 0;		private var pTargetName:String = "";		//		public function modPanel():void {			traceOut("constructor");			this.visible = false;			stop();		}		//		public function init(vRoot:Object):void {			traceOut("init");			pRoot = vRoot;			//this.visible = true;			this.x = 700;			this.addEventListener(Event.ENTER_FRAME, enterframe);			this.help_subPanel.helpRequest_Name.addEventListener(MouseEvent.MOUSE_DOWN, jumpToHelpRequest);			selectSubPanel("mod_subPanel");			initMoonPhase();		}		//		public function enterframe(e):void {			checkPanelDrag();			updateSliders();		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		//On and off		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function toggleModPanel():void {			if (this.visible == true) {				this.visible = false;			} else {				this.visible = true;			}		}		//		public function closeModPanel():void {			this.visible = false;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// Dragging		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function dragOn():void {			pDragging = true;			pDragX = this.mouseX;			pDragY = this.mouseY;		}		//		public function dragOff():void {			pDragging = false;		}		//		private function checkPanelDrag():void {			if (pDragging) {				this.x = pRoot.mouseX - pDragX;				this.y = pRoot.mouseY - pDragY;			}		}		//		public function selectSubPanel( nme:String):void {			traceOut("selectSubPanel = " + nme);			deselectAllSubPanels();			this[nme].visible = true;		}		//		private function deselectAllSubPanels():void {			this.mod_subPanel.visible = false;			this.moons_subPanel.visible = false;			this.alert_subPanel.visible = false;			this.help_subPanel.visible = false;		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// secure moderation functions		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		public function setTargetId(id:int, nme:String) {			if (pTargetName != nme) {				clearUserInfo();				pTargetName = nme;				pTargetId = id;				mod_subPanel.userName.text = nme;			}		}		//		public function bootUser():void {			sendModCommand("Boot", "", "", pTargetId);		}		//		public function banUser():void {			sendModCommand("Ban", "", "", pTargetId);		}		//		public function warnCustom():void {			var txt:String = this.mod_subPanel.warnTxt.text;			sendModCommand("ModMsg", "", txt, pTargetId);		}		//		public function warnPreset(vType:String):void {			var txt:String = "Please be nice.";			switch (vType) {				case "rude" :					txt = "Please don't be rude to other players";					break;				case "lewd" :					txt = "Please don't be lewd or talk about sexual things.";					break;				case "racist" :					txt = "Please don't engage in racism, sexism," + "\r" + "bigotry or nationalism in this game." + " \r" + "This game is for everyone.";					break;				case "spam" :					txt = "Please don't spam the chat by saying  or doing the same thing over and over again.";					break;				case "annoy" :					txt = "Please don't go out of your way to annoy other players.";					break;				case "mean" :					txt = "Please don't say mean things to other players.";					break;			}			this.mod_subPanel.warnTxt.text = txt;			sendModCommand("ModMsg", "", txt, pTargetId);		}		//		public function sendAnnounce(vType:String):void {			traceOut("sendAnnounce");			var txt:String = this.alert_subPanel.announceTxt.text;			sendModCommand("Announce", vType, txt, pTargetId);		}		//		public function getUserInfo():void {			traceOut("getUserInfo");			sendModCommand("Info", "", "", pTargetId);		}		//		private function clearUserInfo():void {			mod_subPanel.userName.text = "";			this.mod_subPanel.ipTxt.text = "";			this.mod_subPanel.dbIDtxt.text = "";			this.mod_subPanel.levelTxt.text = "";			this.mod_subPanel.statusTxt.text = "";			this.mod_subPanel.geoTxt.text = "";		}		//		public function takeUserInfo(vData:SFSObject):void {			var ip:String = vData.getUtfString("ipAddress");			var dbid:int = vData.getInt("uID");			var level:int = vData.getInt("uLevel");			var vStatus:int = vData.getInt("uStatus");			this.mod_subPanel.ipTxt.text = ip;			this.mod_subPanel.dbIDtxt.text = dbid;			this.mod_subPanel.levelTxt.text = level;			this.mod_subPanel.statusTxt.text = vStatus;			getGeoLocFromIP(ip);		}		//		private function getGeoLocFromIP(ip:String):void {			var url:String = 'http://www.ip2location.com/' + ip;			trace(url);			var pGeoLoader:URLLoader = new URLLoader();			var req:URLRequest = new URLRequest(url);			pGeoLoader.addEventListener(Event.COMPLETE, getGeoComplete);			pGeoLoader.load(req);		}		//;		private function getGeoComplete(e:Event):void {			trace("getGeoComplete");			var txt1:String = (e.target as URLLoader).data;			if (txt1) {				var index1:int = txt1.indexOf("<td><b>Weather Station</b></td>");				var txt2:String = txt1.substring(index1+31, index1 + 150);				var txt3:Array = txt2.split("<td>");				var txt4:String = txt3[1];				var txt5:Array = txt4.split("</td>");				var txt6:String = txt5[0];				trace("Geo Loc = " + txt6);				this.mod_subPanel.geoTxt.text = txt6;			}		}		//		public function helpRequested():void {			trace("helpRequested");			updateHelpRequestText();			var snd:Sound = new modHelpSnd  ;			snd.play();		}		//		private function updateHelpRequestText():void {			var nameTxt:String = "";			var roomTxt:String = "";			var timeTxt:String = "";			var lxTxt:String = "";			var lyTxt:String = "";			for (var i in pRoot.gModHelpRequests) {				var requestArray:Array = pRoot.gModHelpRequests[i];				nameTxt = nameTxt + (requestArray[0]) + "\r";				roomTxt = roomTxt + (requestArray[1]) + "\r";				timeTxt = timeTxt +  (requestArray[2]) + "\r";				lxTxt = lxTxt +  (requestArray[3]) + "\r";				lyTxt = lyTxt +  (requestArray[4]) + "\r";			}			this.help_subPanel.helpRequest_Name.text = nameTxt;			this.help_subPanel.helpRequest_Room.text = roomTxt;			this.help_subPanel.helpRequest_Time.text = timeTxt;			this.help_subPanel.helpRequest_lx.text = lxTxt;			this.help_subPanel.helpRequest_ly.text = lyTxt;		}		//		private function jumpToHelpRequest(evt:MouseEvent):void {			trace("jumpToHelpRequest");			var index:int = this.help_subPanel.helpRequest_Name.getLineIndexAtPoint(evt.localX,evt.localY);			var nme:String = this.help_subPanel.helpRequest_Name.getLineText(index);			nme = nme.split("\r").join("");			var requestArray:Array = pRoot.gModHelpRequests[nme];			if (requestArray) {				var lroom:String = requestArray[1];				var lx:int = requestArray[3];				var ly:int = requestArray[4];				pRoot.jumpToModRequest(lroom, lx, ly);			}		}		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		// extension calls		//------------------------------------------------------------------------------------------------------------------------		private function sendModCommand(cmd2:String, cmd3:String, msg:String, vTarget:int):void {			//traceOut("modCmd = " + cmd2 + " : " + msg);			var obj:ISFSObject = new SFSObject();			obj.putUtfString("cmd2",cmd2);			if (cmd3 != "") {				obj.putUtfString("cmd3", cmd3);			}			if (msg != "") {				obj.putUtfString("Msg", msg);			}			obj.putInt("targetID", vTarget);			pRoot.smartFox.send(new ExtensionRequest("modCmd", obj));		}		//------------------------------------------------------------------------------------------------------------------------;		//------------------------------------------------------------------------------------------------------------------------;		// moon phases		//------------------------------------------------------------------------------------------------------------------------		//------------------------------------------------------------------------------------------------------------------------		private function initMoonPhase():void {			this.moons_subPanel.rMoonInput.text = pRoot.gRmoonPhase;			this.moons_subPanel.gMoonInput.text = pRoot.gGmoonPhase;			this.moons_subPanel.bMoonInput.text = pRoot.gBmoonPhase;			updateSliders();		}		//		private function updateSliders():void {			if (! this.visible || ! this.moons_subPanel.visible) {				return;			}			var rTxt:String = moons_subPanel.rMoonInput.text;			var gTxt:String = moons_subPanel.gMoonInput.text;			var bTxt:String = moons_subPanel.bMoonInput.text;			var rNum:int = limitSlider(Math.round(parseInt(rTxt)));			var gNum:int = limitSlider(Math.round(parseInt(gTxt)));			var bNum:int = limitSlider(Math.round(parseInt(bTxt)));			moons_subPanel.rMoonInput.text = rNum;			moons_subPanel.gMoonInput.text = gNum;			moons_subPanel.bMoonInput.text = bNum;			this.moons_subPanel.rMoonSlider.setSliderNum(rNum);			this.moons_subPanel.gMoonSlider.setSliderNum(gNum);			this.moons_subPanel.bMoonSlider.setSliderNum(bNum);			if (pRoot) {				pRoot.gRmoonPhase = rNum;				pRoot.gGmoonPhase = gNum;				pRoot.gBmoonPhase = bNum;			}			var mp:Object = this.moons_subPanel.moonPreview;			setMoonPreview(mp.rMoon,  250, rNum);			setMoonPreview(mp.gMoon,  250, gNum);			setMoonPreview(mp.bMoon,  250, bNum);		}		//		public function limitSlider(n:int):int {			if (n>100) {				n = 100;			}			if (n<0) {				n = 0;			}			return n;		}		//		private function setMoonPreview(vMoon:Object, vHorizonY:Number, vPhase:Number):void {			var lx:int = vPhase * 10;			var deg:int = (vPhase * 3.6);			var ly:Number = vHorizonY + (.75 * (vHorizonY * Math.cos(deg * 0.0174)));			vMoon.x = lx;			vMoon.y = ly;		}		//		public function applyMoonPhase():void {			updateSliders();			if (pRoot) {				pRoot.loadMap();			}		}		//		private function traceOut(txt:String):void {			trace("modPanel: " + txt);		}	}}//