package scripts.parents.loginPage{	import flash.display.Stage;	import flash.display.MovieClip;	import flash.events.*;	import flash.events.MouseEvent;	//	public class loginPage extends MovieClip {		public var pRoot:Object = null;		private var pLogin:String = "test1";		private var pPW:String = "test1";		public var pSavePWToggle:Boolean = false;		//		public function loginPage():void {			stop();		}		//		public function init(vRoot:Object):void {			trace("splashPage init");			pRoot = vRoot;			setLoginText();			stop();		}		//		private function setLoginText():void {			if (pRoot.gUserName != "" && pRoot.gPassword != "") {				pLogin = (pRoot.gUserName);				pPW  =  (pRoot.gPassword);			} else {				var cookieData1 = pRoot.retrieveCookie("TidesLogin");				if (cookieData1.length > 0) {					pLogin = cookieData1[0];					pPW = cookieData1[1];					this.loginBox.savePwBtn.setToggle(true);				} else {					pLogin = "";					pPW = "";					this.loginBox.savePwBtn.setToggle(false);				}			}			setRandomLogin();			this.loginBox.loginTxt.text = pLogin;			this.loginBox.pwTxt.text = pPW;			this.loginBox.visible = true;			this.messageTxt.text = "Please log in" + "\r" + "or create a new account";		}		//for testing purposes		private function setRandomLogin():void{			pLogin = "test" + (Math.round(Math.random()*9)+1);			pPW = pLogin;		}		//		public function getLoginName():String {			pLogin = this.loginBox.loginTxt.text;			return (pLogin);		}		//		public function getLoginPW():String {			pPW = this.loginBox.pwTxt.text;			//obfuscatePW (pPW.length);			return (pPW);		}		//		public function obfuscatePW(n:int):void {			var ObfPW:String = "";			for (var i = 0; i <n; i++) {				ObfPW = ObfPW + "*";			}			this.loginBox.pwTxt.text = ObfPW;		}		//		public function login():void {			pRoot.login();			this.loginBox.visible = false;			this.messageTxt.text = "Logging in...";			gotoAndStop("checking");		}		//		public function guestLogin():void{			this.loginBox.loginTxt.text = "";			this.loginBox.pwTxt.text = "";			this.loginBox.visible = false;			this.messageTxt.text = "Logging in as guest...";			pRoot.gIsGuest = true;			pRoot.login();			gotoAndStop("checking");		}		//		public function loginError(vErrorTxt:String, vErrorCode:int):void {			gotoAndStop("loginFail");			switch (vErrorCode) {				case 2 :					vErrorTxt = "Wrong user name." + "\r" + "Please try again.";					break;				case 3 :					vErrorTxt = "Wrong password." + "\r" + "Please try again.";					break;				case 6 :					vErrorTxt = "Sorry, you're already logged in." + "\r" + "You may want to change your password" + "\r" + "if you think someone else is using your account.";					break;				case 28 :					vErrorTxt = "Problem connecting to database." + "\r" + "Please try again.";					break;			}			this.messageTxt.text = vErrorTxt;		}		//		public function reLogin():void {			trace("reLogin");			gotoAndStop("login");			pRoot.relogin();			setLoginText();		}		//		public function getModPw():void {			this.gotoAndStop("modPw");		}		//		public function loadModPWCookie():void {			var pw1:Array = pRoot.retrieveCookie("TidesModPw");			if (pw1.length > 0) {				var pw2:String = pw1[0];				this.modPwBox.modPwText.text = pw2;			}		}		//		public function submitModPw():void {			var pw:String = this.modPwBox.modPwText.text;			pRoot.saveModPwCookie(pw);			pRoot.goodLogin();		}		//	}}///////