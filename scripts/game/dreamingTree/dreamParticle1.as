package scripts.game.dreamingTree{	import flash.display.Sprite;	import flash.events.*;	import flash.display.Stage;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.display.Loader;	import flash.geom.Point;	import flash.geom.ColorTransform;	import fl.motion.Color;	public class dreamParticle1 extends Sprite {		private var pRoot:Object = null;		private var pRoomObj:Object = null;		private var pMasterDream:Boolean = false;		private var gLoader:Loader = new Loader  ;		private var pCycle1:int = 0;		private var pCycle2:int = 0;		private var pSize1:Number = 15;		private var pSize2:int = 15;		private var dSize:Number = .5;		private var x0:int = 0;		private var y0:int = 0;		public var x1:Number = 0;		public var y1:Number = 0;		private var x2:int = 0;		private var y2:int = 0;		private var dx:Number = 0;		private var dy:Number = 0;		private var pFrm:int = 1;		private var pState:int = 1;		private var pWaitRandom:int = 20;		private var pCapturedArray:Array = [];		private var pNumOfDreams:int = 13;		private var pDreamResult:Object = null;		private var pScale:Number = 1;		public function dreamParticle1():void {		}		//		public function init(vRoot:Object, vRoomObj:Object, vLayerObj:Object, vSwfTarget):void {			//trace("dreamParticle1 init");			pRoot = vRoot;			pRoomObj = vRoomObj;			x0 = this.x;			y0 = this.y;			if (this.name == "masterDream") {				pMasterDream = true;			}			pickRandomSize();			pickRandomLoc();		}		//		private function pickRandomSize():void {			pSize2 = 10 + (Math.random()*30);			dSize = 5 + (Math.random()*10);		}		//		private function pickRandomLoc():void {			x1 = x0 + (Math.random()-Math.random())*15;			y1 = y0 + (Math.random()-Math.random())*15;			dx = (Math.random()-Math.random())*2;			dy = (Math.random()-Math.random())*2;		}		//		public function enterframe():void {			this.x = x1;			this.y = y1;			var onScreen:Boolean = pRoomObj.pointOnScreen(x1,y1);			if (onScreen) {				this.visible = true;			} else {				this.visible = false;			}			switch (pState) {				case -1 :					return;					break;				case 1 :					if (onScreen) {						getAvatarLoc();						orbitOrigin();						pulsate();						checkCapture();					}					break;				case 2 :					getAvatarLoc();					pulsate();					seekAvatar();					break;				case 3 :					getAvatarLoc();					pulsate();					seekAvatar();					checkMerge();					break;				case 4 :					returnToTreeC();					break;				case 5 :					if (onScreen) {						orbitOrigin();						pulsate();					}					break;			}		}		//		private function getAvatarLoc():void {			if (pRoot.pMyAvatar) {				x2 = pRoot.pMyAvatar.x1;				y2 = pRoot.pMyAvatar.y1 - 130;			}		}		//		private function orbitOrigin():void {			x1 = x1 + dx;			y1 = y1 + dy;			if (x1 > x0) {				dx = dx - .1;			} else {				dx = dx + .1;			}			if (y1 > y0) {				dy = dy - .1;			} else {				dy = dy + .1;			}		}		//		private function pulsate():void {			var diff:Number = (pSize2 - pSize1) / dSize;			pSize1 = pSize1 + diff;			this.width = pSize1;			this.height = pSize1;			if (Math.abs(diff) < .1) {				pickRandomSize();			}			this.alpha = pSize1 / 30;		}		//		private function checkCapture():void {			var diffx = Math.abs(x2-x1);			var diffy = Math.abs(y2-y1);			if (diffx < 60 && diffy<300) {				capture();			}		}		//		private function capture():void {			pState = 2;			parent.masterDream.dreamParticleCaptured(this);			tintParticle();		}		//		private function tintParticle():void {			var obj1:Object = this.getChildAt(0);			this.removeChild(obj1);			var obj2:Object = new dreamPink  ;			this.addChild(obj2);		}		//		private function untintParticle():void {			var obj1:Object = this.getChildAt(0);			this.removeChild(obj1);			var obj2:Object = new dreamBlue  ;			this.addChild(obj2);		}		//;		private function seekAvatar():void {			x1 = x1 + dx;			y1 = y1 + dy;			if (x2 > x1) {				dx = dx + .5;			} else {				dx = dx - .5;			}			if (y2 > y1) {				dy = dy + .5;			} else {				dy = dy - .5;			}			if (y1 <10) {				y1 = 10;				dy = .1;			}			dx = dx * .95;			dy = dy * .95;		}		//		public function dreamParticleCaptured(obj:Object):void {			pCapturedArray.push(obj);			if (pCapturedArray.length > pNumOfDreams) {				pState = 3;			}		}		//		private function checkMerge():void {			for (var i = 0; i<pCapturedArray.length; i++) {				var obj:Object = pCapturedArray[i];				var diffx = Math.abs(x1 - obj.x1);				var diffy = Math.abs(y1 - obj.y1);				if (diffx>5 || diffy>5) {					return;				}			}			mergeComplete();		}		//		private function mergeComplete():void {			loadDreamResult();			pState = -1;		}		//		private function loadDreamResult():void {			var assetPath:String = "dreams/dream_" + 1 + ".swf";			gLoader = new Loader  ;			gLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,dreamLoaded);			gLoader.load(new URLRequest(assetPath));		}		//		private function dreamLoaded(e:Event):void {			pDreamResult = gLoader.content as Object;			pDreamResult.x = this.x;			pDreamResult.y = this.y;			parent.addChild(pDreamResult);			pDreamResult.init(pRoot, pRoomObj);			pState = 4;			pCycle1 = 0;			returnToTreeA();		}		//		private function returnToTreeA():void {			for (var i = 0; i<pCapturedArray.length; i++) {				var obj:Object = pCapturedArray[i];				obj.returnToTreeB();			}		}		//		private function returnToTreeB():void {			untintParticle();			pickRandomSize();			pState = 4;		}		//		private function returnToTreeC():void {			var diffx:int = (x0 - x1);			var diffy:int = (y0 - y1);			x1 = x1 + diffx / 10;			y1 = y1 + diffy / 10;			this.x = x1;			this.y = y1;			if (Math.abs(diffx) < 12 && Math.abs(diffy) < 12) {				pState = 5;			}		}		//		public function deleteMe():void {			if (pState != -1) {				pRoot = null;				pRoomObj = null;				pDreamResult = null;				pState = -1;				if (parent) {					parent.removeChild(this);				}			}		}		//	}}//